" All transfers "
type Transfer @entity @index(fields: ["block", "extrinsicId"]) {
  from: Bytes! @index
  to: Bytes!
  fromAccount: Account
  toAccount: Account
  value: BigInt!
  comment: String @fulltext(query: "commentSearch")
  block: Int!
  tip: BigInt!
  timestamp: BigInt!
  insertedAt: DateTime!
  extrinsicId: String
}


" Tracks block timestamps "
type BlockTimestamp @entity {
  blockNumber: Int!
  timestamp: BigInt!
}


" Tracks block hooks "
type BlockHook @entity {
  blockNumber: Int!
  type: HookType!
  timestamp: BlockTimestamp
}


enum HookType {
  PRE
  POST
}


type Account @entity {
  "Account address"
  id: ID!
  balance: BigInt!
  status: Status!
  incomingTx: [Transfer!] @derivedFrom(field: "toAccount")
  outgoingTx: [Transfer!] @derivedFrom(field: "fromAccount")
}


type Miserable {
  hates: String!
  loves: [String]!
}


type HappyPoor {
  isMale: Boolean
}


union Poor = HappyPoor | Miserable


type MiddleClass {
  father: Poor
  mother: Poor
}


union Status = MiddleClass | HappyPoor | Miserable


type Extrinsic @entity {
  id: ID!
  hash: String!
}


interface Event {
  indexInBlock: Int!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
}


type EventA implements Event @entity {
  id: ID!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  field1: String!
}


type EventB implements Event @entity {
  id: ID!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  field2: String!
  statusList: [Status!]
}


type EventC implements Event @entity {
  id: ID!
  inExtrinsic: String
  inBlock: Int!
  network: Network!
  indexInBlock: Int!
  field3: String!
  complexField: ComplexEntity!
}


type ComplexEntity @entity {
  arg1: String
  arg2: String
}


enum Network {
  BABYLON
  ALEXANDRIA
  ROME
  OLYMPIA
}


type AdditionalData {
  data: Bytes
}


type EventParam {
  name: String
  type: String
  value: String
  additionalData: [AdditionalData!]
}


type SystemEvent @entity {
  id: ID!
  params: EventParam!
  arrayField: [String!]
}


type Issue @entity {
  id: ID!
  payment: IssuePayment @derivedFrom(field: "issue")
  cancellation: IssueCancellation @derivedFrom(field: "issue")
}


type IssuePayment @entity {
  issue: Issue! @unique
  amount: Int!
}


type IssueCancellation @entity {
  issue: Issue! @unique
  block: Int!
}


type ScalarRaw @entity {
  id: ID!
  float: Float
  nested: NestedScalars
  json: JSON
}


type NestedScalars {
  float: Float
  json: JSON
  enumInJson: EnumInJson
}


enum EnumInJson {
  A
  B
  C
}


type SelfReferencedEntity @entity {
  id: ID!
  ref: SelfReferencedEntity
  obj: SelfReferencedObject
}


type SelfReferencedObject {
  ref: SelfReferencedObject
}


type Transaction @entity {
  id: ID!
  name: String!
  sender: String!
}
